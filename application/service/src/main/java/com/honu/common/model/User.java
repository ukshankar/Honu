package com.honu.common.model;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

@Entity
@Table(name = "honuuser")
public class User implements UserDetails {

	/**
	 * This is the id stored in the db 
	 */
	Long id;
	/**
	 * EMail will be same as username this has to be unique
	 */
	String email;
	String password;
	String firstName;
	String lastName;
	private Date lastPasswordReset;
	private Integer reputation = Reputation.GOOGLE;

	private Collection<? extends GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
	private Set<HonuUserAuthority> userRole = new HashSet<HonuUserAuthority>(0);
	private Boolean accountNonExpired = true;

	private Boolean accountNonLocked = true;
	private Boolean credentialsNonExpired = true;
	private Boolean enabled = true;
	
	/**
	 * This string is used to compare the value which goes to email of the user for intial signup
	 */
	private String authString ;

	/**
	 * Set this one which comes form google
	 */
	private String googleToken ;
	
	/**
	 * this one is generated by app
	 */
	private String jwtToken;
	
	
	@GenericGenerator(name = "generator", strategy = "sequence-identity", parameters = @Parameter(name = "sequence", value = "honuuser_honuUserId_seq"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "honuuserid", unique = true, nullable = false, precision = 22, scale = 0)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	
	public Integer getReputation() {
		return reputation;
	}
	
	public void setReputation(Integer reputation) {
		this.reputation = reputation;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "username", unique = true , nullable=false)

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getFirstName() {
		return firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Transient
	public String getUsername() {
		return email;
	}

	@Transient
	public Date getLastPasswordReset() {
		return new Date();
	}

	@Transient
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return authorities;
	}

	public void setAuthorities(Collection<? extends GrantedAuthority> authorities) {
		this.authorities = authorities;
	}

	@OneToMany(cascade=CascadeType.ALL, fetch=FetchType.EAGER)
	  @JoinColumn(name="honuuserid")
	public Set<HonuUserAuthority> getUserRole() {
		return this.userRole;
	}

	public void setUserRole(Set<HonuUserAuthority> userRole) {
		this.userRole = userRole;
	}
	
	public void addUserRole(HonuUserAuthority role1) {
		this.userRole.add(role1);
	}
	
	@Transient
	public Boolean getAccountNonExpired() {
		return accountNonExpired;
	}

	public void setAccountNonExpired(Boolean accountNonExpired) {
		this.accountNonExpired = accountNonExpired;
	}

	@Transient
	public Boolean getAccountNonLocked() {
		return accountNonLocked;
	}

	public void setAccountNonLocked(Boolean accountNonLocked) {
		this.accountNonLocked = accountNonLocked;
	}

	@Transient
	public Boolean getCredentialsNonExpired() {
		return credentialsNonExpired;
	}

	public void setCredentialsNonExpired(Boolean credentialsNonExpired) {
		this.credentialsNonExpired = credentialsNonExpired;
	}

	@Transient

	public Boolean getEnabled() {
		return enabled;
	}

	public void setEnabled(Boolean enabled) {
		this.enabled = enabled;
	}

	public void setLastPasswordReset(Date lastPasswordReset) {
		this.lastPasswordReset = lastPasswordReset;
	}

	
	
	@Transient
	@Override
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return false;
	}

	@Transient
	@Override
	public boolean isAccountNonLocked() {
		// TODO Auto-generated method stub
		return false;
	}

	@Transient
	@Override
	public boolean isCredentialsNonExpired() {
		// TODO Auto-generated method stub
		return false;
	}

	@Transient
	@Override
	public boolean isEnabled() {
		// TODO Auto-generated method stub
		return false;
	}
	@Transient
	public String getGoogleToken() {
		return googleToken;
	}

	public void setGoogleToken(String googleToken) {
		this.googleToken = googleToken;
	}
	@Transient
	public String getJwtToken() {
		return jwtToken;
	}

	public void setJwtToken(String jwtToken) {
		this.jwtToken = jwtToken;
	}

	public String getAuthString() {
		return authString;
	}
	
	public void setAuthString(String authString) {
		this.authString = authString;
	}
	
	@Override
	public String toString() {
		return "User [id=" + id + ", email=" + email + ", password=*******, firstName=" + firstName
				+ ", lastName=" + lastName + ", lastPasswordReset=" + lastPasswordReset + ", reputation=" + reputation
				+ ", authorities=" + authorities + ", accountNonExpired=" + accountNonExpired + ", accountNonLocked="
				+ accountNonLocked + ", credentialsNonExpired=" + credentialsNonExpired + ", enabled=" + enabled
				+ ", googleToken=" + googleToken + ", jwtToken=" + jwtToken + "]";
	}
	
	
	
}